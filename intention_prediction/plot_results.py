import numpy as np
import matplotlib.pyplot as plt


#####################################################
###################  FFNN Results ###################
#####################################################
ffnn_st_state_o = np.array(
    [
        [0.9812, 0.9412, 0.9060, 0.8794],
        [0.9535, 0.9036, 0.8889, 0.8718],
        [0.9500, 0.9153, 0.9091, 0.9074],
        [0.9545, 0.8810, 0.8810, 0.8537],
        [0.8824, 0.8857, 0.8485, 0.8710],
        [0.9643, 0.8148, 0.8148, 0.8077]
    ]
)

ffnn_st_state_x = np.array(
    [
        [0.6500, 0.5752, 0.5436, 0.5745],
        [0.5349, 0.4940, 0.5679, 0.5256],
        [0.5667, 0.4915, 0.4000, 0.5000],
        [0.6136, 0.5238, 0.5000, 0.4878],
        [0.5000, 0.4571, 0.5455, 0.5806],
        [0.4643, 0.6296, 0.5185, 0.4615]
    ]
)

ffnn_mt_state_o = np.array(
    [
        [0.9643, 0.9429, 0.9143, 0.8857],
        [0.9474, 0.8947, 0.8816, 0.8553],
        [0.9623, 0.9057, 0.9057, 0.8868],
        [0.8750, 0.8000, 0.8250, 0.8250],
        [0.9333, 0.9333, 0.9333, 0.9000],
        [0.9615, 0.8077, 0.8077, 0.8077]
    ]
)

ffnn_mt_state_x = np.array(
    [
        [0.5714, 0.5429, 0.5214, 0.5214],
        [0.4605, 0.4342, 0.4474, 0.4605],
        [0.4717, 0.4528, 0.4528, 0.4528],
        [0.4750, 0.5000, 0.4500, 0.4500],
        [0.5000, 0.6000, 0.4333, 0.5667],
        [0.6154, 0.5769, 0.5000, 0.5000]
    ]
)

#####################################################
###################  GRU Results  ###################
#####################################################

gru_st_state_o = np.array(
    [
        [0.9750, 0.9346, 0.9128, 0.8794],
        [0.9535, 0.9036, 0.9136, 0.8718],
        [0.9333, 0.9153, 0.8909, 0.8889],
        [0.8864, 0.8571, 0.8571, 0.8537],
        [0.8824, 0.8857, 0.8485, 0.8710],
        [0.9286, 0.8148, 0.8148, 0.8077]
    ]
)

gru_st_state_x = np.array(
    [
        [0.7250, 0.6471, 0.6040, 0.6738],
        [0.4884, 0.5181, 0.6049, 0.5385],
        [0.4333, 0.5932, 0.6364, 0.5185],
        [0.4318, 0.5714, 0.5238, 0.6098],
        [0.5294, 0.5429, 0.5455, 0.5161],
        [0.5714, 0.4074, 0.6296, 0.5769]
    ]
)

gru_mt_state_o = np.array(
    [
        [0.9643, 0.9429, 0.9143, 0.8857],
        [0.9605, 0.9079, 0.8947, 0.8684],
        [0.9811, 0.9245, 0.9245, 0.9057],
        [0.9250, 0.8500, 0.8500, 0.8500],
        [0.8667, 0.8667, 0.8667, 0.8333],
        [0.9615, 0.8077, 0.8077, 0.8077]
    ]
)

gru_mt_state_x = np.array(
    [
        [0.5857, 0.5929, 0.5929, 0.5786],
        [0.5658, 0.5526, 0.5526, 0.5658],
        [0.4717, 0.4528, 0.4340, 0.6038],
        [0.5000, 0.5250, 0.5250, 0.4500],
        [0.4333, 0.5000, 0.5000, 0.3667],
        [0.5385, 0.3846, 0.5769, 0.5385]
    ]
)

#####################################################
################ Transformer Results  ###############
#####################################################

trans_st_state_o = np.array(
    [
        [0.9128, 0.9216, 0.9128, 0.8794],
        [0.8023, 0.8072, 0.8765, 0.7170],
        [0.6833, 0.6949, 0.6545, 0.7778],
        [0.7500, 0.6905, 0.6667, 0.6341],
        [0.7941, 0.7429, 0.6364, 0.5806],
        [0.6786, 0.6667, 0.5556, 0.4231]
    ]
)

trans_st_state_x = np.array(
    [
        [0.5000, 0.4902, 0.5705, 0.5461],
        [0.4651, 0.3494, 0.4568, 0.4487],
        [0.6167, 0.4915, 0.5636, 0.5000],
        [0.4091, 0.5476, 0.5714, 0.4634],
        [0.5588, 0.5143, 0.3939, 0.5484],
        [0.4643, 0.5185, 0.4444, 0.4231]
    ]
)

trans_mt_state_o = np.array(
    [
        [0.9357, 0.9357, 0.8643, 0.8000],
        [0.7632, 0.8684, 0.5526, 0.6053],
        [0.6604, 0.7925, 0.3774, 0.4717],
        [0.6250, 0.7500, 0.4500, 0.5250],
        [0.6000, 0.7667, 0.4000, 0.5333],
        [0.6538, 0.7692, 0.4615, 0.5769]
    ]
)

trans_mt_state_x = np.array(
    [
        # [0.0000, 0.0000, 0.0000, 0.0000],
        [0.4357, 0.4643, 0.4500, 0.4071],
        [0.5000, 0.5395, 0.4211, 0.4868],
        [0.4515, 0.5094, 0.3962, 0.4717],
        [0.6000, 0.5500, 0.3750, 0.5250],
        [0.5000, 0.5667, 0.3333, 0.5000],
        [0.6154, 0.5769, 0.4231, 0.5769]
    ]
)


legend_mt = ['MT-SO-0.5', 'MT-SO-1.0', 'MT-SO-1.5', 'MT-SO-2.0', 'MT-SX-0.5', 'MT-SX-1.0', 'MT-SX-1.5', 'MT-SX-2.0']
legend_st = ['ST-SO-0.5', 'ST-SO-1.0', 'ST-SO-1.5', 'ST-SO-2.0', 'ST-SX-0.5', 'ST-SX-1.0', 'ST-SX-1.5', 'ST-SX-2.0']
x_axis = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0]


def draw_result_graph(array_o, array_x, leg_list, save_name):
    plt.close('all')
    fig, ax = plt.subplots()
    plt.gca().set_prop_cycle(plt.cycler('color', plt.cm.Dark2(np.linspace(0, 1, 8))))
    plt.plot(x_axis, array_o, marker='o')
    plt.plot(x_axis, array_x, marker='x')
    plt.legend(leg_list, loc='upper right')
    # ratio = 1.0
    # xleft, xright = ax.get_xlim()
    # ybottom, ytop = ax.get_ylim()
    # the abs method is used to make sure that all numbers are positive
    # because x and y axis of an axes maybe inverted.
    # ax.set_aspect(abs((xright - xleft) / (ybottom - ytop)) * ratio)
    plt.ylim(0.3, 1.0)
    plt.xlabel('Context Length (sec.)')
    plt.ylabel('Accuracy (%)')
    plt.savefig(save_name, bbox_inches="tight")
    # plt.show()


if __name__ == "__main__":
    draw_result_graph(ffnn_mt_state_o, ffnn_mt_state_x, legend_mt, 'intention_FFNN_MT.png')
    draw_result_graph(ffnn_st_state_o, ffnn_st_state_x, legend_st, 'intention_FFNN_ST.png')

    draw_result_graph(gru_mt_state_o, gru_mt_state_x, legend_mt, 'intention_gru_MT.png')
    draw_result_graph(gru_st_state_o, gru_st_state_x, legend_st, 'intention_gru_ST.png')

    draw_result_graph(trans_mt_state_o, trans_mt_state_x, legend_mt, 'intention_transformer_MT.png')
    draw_result_graph(trans_st_state_o, trans_st_state_x, legend_st, 'intention_transformer_ST.png')

